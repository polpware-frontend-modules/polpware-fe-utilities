/*
BasicTypes :=
    boolean
  | number
  | string
  | date
  | symbol
  | null
  | undefined
  | array
  | object
  | function
*/
export function isBoolean(x) {
    return typeof x === 'boolean';
}
export function isNumber(x) {
    return typeof x === 'number';
}
export function isString(x) {
    return typeof x === 'string';
}
export function isDate(x) {
    return Object.prototype.toString.call(x) === '[object Date]';
}
export function isSymbol(x) {
    return typeof x === 'symbol';
}
export function isNull(x) {
    return x === null;
}
export function isUndefined(x) {
    return x === undefined;
}
export function isArray(x) {
    return x instanceof Array;
}
export function isObject(x) {
    return typeof x === 'object';
}
export function isFunction(x) {
    return typeof x === 'function';
}
;
export const tyBool = { name: 'Boolean', val: false, pred: isBoolean };
export const tyNull = { name: 'Null', val: null, pred: isNull };
export const tyUndefined = { name: 'Undefined', val: undefined, pred: isUndefined };
export const tyNumber = { name: 'Number', val: 0, pred: isNumber };
export const tyString = { name: 'String', val: '', pred: isString };
export const tyDate = { name: 'Object', val: function () { return Date.now(); }, pred: isDate };
export const tySymbol = { name: 'Symbol', val: null, pred: isSymbol };
export const tyObject = { name: 'Object', val: function () { return {}; }, pred: isObject };
export const tyArray = { name: 'Array', val: function () { return []; }, pred: isArray };
export const tyFunction = { name: 'Function', val: function () { }, pred: isFunction };
/**
 *  Predefined types and their properties.
 */
const preDefinedTypes = {
    tyBool: tyBool,
    tyNull: tyNull,
    tyUndefined: tyUndefined,
    tyNumber: tyNumber,
    tyString: tyString,
    tyDate: tyDate,
    tySymbol: tySymbol,
    tyObject: tyObject,
    tyArray: tyArray,
    tyFunction: tyFunction
};
/**
 * Returns the default value for a given type.
 */
export function defaultValue(ty) {
    let val = ty.val;
    if (ty !== tyFunction && typeof val === 'function') {
        val = val();
    }
    return val;
}
/**
 * Type checks if a given value is type of the given ty
 */
export function ok(value, ty) {
    return ty.pred(value);
}
/**
 * Returns the type for the given value.
 */
export function getType(value) {
    for (let prop in preDefinedTypes) {
        if (ok(value, preDefinedTypes[prop])) {
            return preDefinedTypes[prop];
        }
    }
    return null;
}
export function assert(value, ty) {
    if (ok(value, ty)) {
        return;
    }
    throw new Error('type check error: exptected type is ' +
        ty + ' but given type is ' + typeof value);
}
//# sourceMappingURL=data:application/json;base64,