import * as moment from 'moment';
/**
 * Converts the given date and time into a UTC time.
 * If the given time zone is null or undefined, this
 * method will not use the local time zone.
 * @param dateInLocal Date in local time
 * @param timeInLocal Time in local time
 * @param timezone Optional time zone
 */
export function convertToUtc(dateInLocal, timeInLocal, timezone) {
    // Construct a new time 
    const workTime = new Date(dateInLocal.getFullYear(), dateInLocal.getMonth(), dateInLocal.getDay(), timeInLocal.getHours(), timeInLocal.getMinutes());
    const timeWrapper = moment(workTime);
    // The above time should be interpreted in the given timezone
    if (timezone) {
        // Utc time
        timeWrapper.subtract(timezone, 'hours');
    }
    // Convert to UTC time
    let timeInUtc = new Date(Date.UTC(timeWrapper.year(), timeWrapper.month(), timeWrapper.day(), timeWrapper.hour(), timeWrapper.minute(), timeWrapper.second()));
    return timeInUtc;
}
/**
 Get the timezone offset between the local time and UTC.
 */
export function getTimezoneOffset() {
    const d = new Date();
    const n = d.getTimezoneOffset();
    return -Math.floor(n / 60);
}
/**
 * A set of commonly used interval.
 */
export var IntervalEnum;
(function (IntervalEnum) {
    IntervalEnum[IntervalEnum["Day"] = 10] = "Day";
    IntervalEnum[IntervalEnum["Week"] = 50] = "Week";
    IntervalEnum[IntervalEnum["Month"] = 100] = "Month";
    IntervalEnum[IntervalEnum["Year"] = 500] = "Year";
})(IntervalEnum || (IntervalEnum = {}));
/**
 * Returns the UTC time this moment.
 * This method uses the current time zone.
 */
export function getUtcNow() {
    const now = new Date();
    const offset = getTimezoneOffset();
    return convertToUtc(now, now, offset);
}
export function hasDST(date = new Date()) {
    const january = new Date(date.getFullYear(), 0, 1).getTimezoneOffset();
    const july = new Date(date.getFullYear(), 6, 1).getTimezoneOffset();
    return Math.max(january, july) !== date.getTimezoneOffset();
}
/**
 * Converts a local time to Utc string.
 * @param date
 */
export function convertToUtcString(date) {
    return date.toISOString();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwb2xwd2FyZS9mZS11dGlsaXRpZXMvIiwic291cmNlcyI6WyJsaWIvc3JjL3Rvb2xzL2RhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLLE1BQU0sTUFBTSxRQUFRLENBQUM7QUFFakM7Ozs7Ozs7R0FPRztBQUNILE1BQU0sVUFBVSxZQUFZLENBQUMsV0FBaUIsRUFBRSxXQUFpQixFQUFFLFFBQWlCO0lBQ2hGLHdCQUF3QjtJQUN4QixNQUFNLFFBQVEsR0FBRyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLEVBQy9DLFdBQVcsQ0FBQyxRQUFRLEVBQUUsRUFDdEIsV0FBVyxDQUFDLE1BQU0sRUFBRSxFQUNwQixXQUFXLENBQUMsUUFBUSxFQUFFLEVBQ3RCLFdBQVcsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO0lBQzlCLE1BQU0sV0FBVyxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNyQyw2REFBNkQ7SUFDN0QsSUFBSSxRQUFRLEVBQUU7UUFDVixXQUFXO1FBQ1gsV0FBVyxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7S0FDM0M7SUFFRCxzQkFBc0I7SUFDdEIsSUFBSSxTQUFTLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLEVBQ2hELFdBQVcsQ0FBQyxLQUFLLEVBQUUsRUFDbkIsV0FBVyxDQUFDLEdBQUcsRUFBRSxFQUNqQixXQUFXLENBQUMsSUFBSSxFQUFFLEVBQ2xCLFdBQVcsQ0FBQyxNQUFNLEVBQUUsRUFDcEIsV0FBVyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztJQUUzQixPQUFPLFNBQVMsQ0FBQztBQUNyQixDQUFDO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLFVBQVUsaUJBQWlCO0lBQzdCLE1BQU0sQ0FBQyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7SUFDckIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLGlCQUFpQixFQUFFLENBQUM7SUFDaEMsT0FBTyxDQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0FBQ2hDLENBQUM7QUFFRDs7R0FFRztBQUNILE1BQU0sQ0FBTixJQUFZLFlBS1g7QUFMRCxXQUFZLFlBQVk7SUFDcEIsOENBQVEsQ0FBQTtJQUNSLGdEQUFTLENBQUE7SUFDVCxtREFBVyxDQUFBO0lBQ1gsaURBQVUsQ0FBQTtBQUNkLENBQUMsRUFMVyxZQUFZLEtBQVosWUFBWSxRQUt2QjtBQUVEOzs7R0FHRztBQUNILE1BQU0sVUFBVSxTQUFTO0lBQ3JCLE1BQU0sR0FBRyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7SUFDdkIsTUFBTSxNQUFNLEdBQUcsaUJBQWlCLEVBQUUsQ0FBQztJQUNuQyxPQUFPLFlBQVksQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQzFDLENBQUM7QUFFRCxNQUFNLFVBQVUsTUFBTSxDQUFDLElBQUksR0FBRyxJQUFJLElBQUksRUFBRTtJQUNwQyxNQUFNLE9BQU8sR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixFQUFFLENBQUM7SUFDdkUsTUFBTSxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQ3BFLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7QUFDaEUsQ0FBQztBQUVEOzs7R0FHRztBQUNILE1BQU0sVUFBVSxrQkFBa0IsQ0FBQyxJQUFVO0lBQ3pDLE9BQU8sSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQzlCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBtb21lbnQgZnJvbSAnbW9tZW50JztcblxuLyoqXG4gKiBDb252ZXJ0cyB0aGUgZ2l2ZW4gZGF0ZSBhbmQgdGltZSBpbnRvIGEgVVRDIHRpbWUuIFxuICogSWYgdGhlIGdpdmVuIHRpbWUgem9uZSBpcyBudWxsIG9yIHVuZGVmaW5lZCwgdGhpcyBcbiAqIG1ldGhvZCB3aWxsIG5vdCB1c2UgdGhlIGxvY2FsIHRpbWUgem9uZS5cbiAqIEBwYXJhbSBkYXRlSW5Mb2NhbCBEYXRlIGluIGxvY2FsIHRpbWVcbiAqIEBwYXJhbSB0aW1lSW5Mb2NhbCBUaW1lIGluIGxvY2FsIHRpbWVcbiAqIEBwYXJhbSB0aW1lem9uZSBPcHRpb25hbCB0aW1lIHpvbmVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRUb1V0YyhkYXRlSW5Mb2NhbDogRGF0ZSwgdGltZUluTG9jYWw6IERhdGUsIHRpbWV6b25lPzogbnVtYmVyKSB7XG4gICAgLy8gQ29uc3RydWN0IGEgbmV3IHRpbWUgXG4gICAgY29uc3Qgd29ya1RpbWUgPSBuZXcgRGF0ZShkYXRlSW5Mb2NhbC5nZXRGdWxsWWVhcigpLFxuICAgICAgICBkYXRlSW5Mb2NhbC5nZXRNb250aCgpLFxuICAgICAgICBkYXRlSW5Mb2NhbC5nZXREYXkoKSxcbiAgICAgICAgdGltZUluTG9jYWwuZ2V0SG91cnMoKSxcbiAgICAgICAgdGltZUluTG9jYWwuZ2V0TWludXRlcygpKTtcbiAgICBjb25zdCB0aW1lV3JhcHBlciA9IG1vbWVudCh3b3JrVGltZSk7XG4gICAgLy8gVGhlIGFib3ZlIHRpbWUgc2hvdWxkIGJlIGludGVycHJldGVkIGluIHRoZSBnaXZlbiB0aW1lem9uZVxuICAgIGlmICh0aW1lem9uZSkge1xuICAgICAgICAvLyBVdGMgdGltZVxuICAgICAgICB0aW1lV3JhcHBlci5zdWJ0cmFjdCh0aW1lem9uZSwgJ2hvdXJzJyk7XG4gICAgfVxuXG4gICAgLy8gQ29udmVydCB0byBVVEMgdGltZVxuICAgIGxldCB0aW1lSW5VdGMgPSBuZXcgRGF0ZShEYXRlLlVUQyh0aW1lV3JhcHBlci55ZWFyKCksXG4gICAgICAgIHRpbWVXcmFwcGVyLm1vbnRoKCksXG4gICAgICAgIHRpbWVXcmFwcGVyLmRheSgpLFxuICAgICAgICB0aW1lV3JhcHBlci5ob3VyKCksXG4gICAgICAgIHRpbWVXcmFwcGVyLm1pbnV0ZSgpLFxuICAgICAgICB0aW1lV3JhcHBlci5zZWNvbmQoKSkpO1xuXG4gICAgcmV0dXJuIHRpbWVJblV0Yztcbn1cblxuLyoqXG4gR2V0IHRoZSB0aW1lem9uZSBvZmZzZXQgYmV0d2VlbiB0aGUgbG9jYWwgdGltZSBhbmQgVVRDLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0VGltZXpvbmVPZmZzZXQoKSB7XG4gICAgY29uc3QgZCA9IG5ldyBEYXRlKCk7XG4gICAgY29uc3QgbiA9IGQuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgICByZXR1cm4gLSBNYXRoLmZsb29yKG4gLyA2MCk7XG59XG5cbi8qKlxuICogQSBzZXQgb2YgY29tbW9ubHkgdXNlZCBpbnRlcnZhbC5cbiAqL1xuZXhwb3J0IGVudW0gSW50ZXJ2YWxFbnVtIHtcbiAgICBEYXkgPSAxMCxcbiAgICBXZWVrID0gNTAsXG4gICAgTW9udGggPSAxMDAsXG4gICAgWWVhciA9IDUwMFxufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIFVUQyB0aW1lIHRoaXMgbW9tZW50LlxuICogVGhpcyBtZXRob2QgdXNlcyB0aGUgY3VycmVudCB0aW1lIHpvbmUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRVdGNOb3coKTogRGF0ZSB7XG4gICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbiAgICBjb25zdCBvZmZzZXQgPSBnZXRUaW1lem9uZU9mZnNldCgpO1xuICAgIHJldHVybiBjb252ZXJ0VG9VdGMobm93LCBub3csIG9mZnNldCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNEU1QoZGF0ZSA9IG5ldyBEYXRlKCkpIHtcbiAgICBjb25zdCBqYW51YXJ5ID0gbmV3IERhdGUoZGF0ZS5nZXRGdWxsWWVhcigpLCAwLCAxKS5nZXRUaW1lem9uZU9mZnNldCgpO1xuICAgIGNvbnN0IGp1bHkgPSBuZXcgRGF0ZShkYXRlLmdldEZ1bGxZZWFyKCksIDYsIDEpLmdldFRpbWV6b25lT2Zmc2V0KCk7XG4gICAgcmV0dXJuIE1hdGgubWF4KGphbnVhcnksIGp1bHkpICE9PSBkYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG59XG5cbi8qKlxuICogQ29udmVydHMgYSBsb2NhbCB0aW1lIHRvIFV0YyBzdHJpbmcuXG4gKiBAcGFyYW0gZGF0ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gY29udmVydFRvVXRjU3RyaW5nKGRhdGU6IERhdGUpIHtcbiAgICByZXR1cm4gZGF0ZS50b0lTT1N0cmluZygpO1xufVxuIl19